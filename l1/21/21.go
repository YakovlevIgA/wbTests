package main

import "fmt"

/*
Паттерн «Адаптер»
Реализовать паттерн проектирования «Адаптер» на любом примере.

Описание: паттерн Adapter позволяет сконвертировать интерфейс одного класса в интерфейс другого, который ожидает клиент.

Продемонстрируйте на простом примере в Go: у вас есть существующий интерфейс (или структура) и другой,

несовместимый по интерфейсу потребитель — напишите адаптер, который реализует нужный интерфейс и делегирует вызовы к встроенному объекту.

Поясните применимость паттерна, его плюсы и минусы, а также приведите реальные примеры использования.
*/
// todo Применимость:
// todo Когда нужно использовать существующий объект, но его интерфейс не совпадает с тем, что ожидает клиент.
// todo Когда нужно интегрировать старый код или библиотеку с новым кодом.
// todo Когда нельзя или не хочется модифицировать чужой код (например, библиотеку).

// Новый интерфейс, который ожидает наш клиент
type Logger interface {
	Log(message string)
}

// Старая структура с несовместимым методом
type OldPrinter struct{}

func (p *OldPrinter) Print(msg string) {
	fmt.Println("OldPrinter:", msg)
}

// Адаптер: реализует интерфейс Logger и внутри вызывает старый Print
type PrinterAdapter struct {
	OldPrinter *OldPrinter
}

func (a *PrinterAdapter) Log(message string) {
	// Адаптер делегирует вызов старому методу
	a.OldPrinter.Print(message)
}

// Клиент, который работает только с Logger
func doSomething(logger Logger) {
	logger.Log("Hello, world!")
}

func main() {
	oldPrinter := &OldPrinter{}
	adapter := &PrinterAdapter{OldPrinter: oldPrinter}

	doSomething(adapter) // Используем старый принтер через адаптер
}
