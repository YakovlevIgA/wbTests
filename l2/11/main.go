package main

import (
	"fmt"
	"sort"
	"strings"
)

/*
Поиск анаграмм в словаре
Напишите функцию, которая находит все множества анаграмм по заданному словарю.

Требования
На вход подается срез строк (слов на русском языке в Unicode).

На выходе: map-множество -> список, где ключом является первое встреченное слово множества,
а значением — срез из всех слов, принадлежащих этому множеству анаграмм, отсортированных по возрастанию.

Множества из одного слова не должны выводиться (т.е. если нет анаграмм, слово игнорируется).

Все слова нужно привести к нижнему регистру.

Пример:

Вход: ["пятак", "пятка", "тяпка", "листок", "слиток", "столик", "стол"]
Результат (ключи в примере могут быть в другом порядке):
– "пятак": ["пятак", "пятка", "тяпка"]
– "листок": ["листок", "слиток", "столик"]

Слово «стол» отсутствует в результатах, так как не имеет анаграмм.

Для решения задачи потребуется умение работать со строками, сортировать
и использовать структуры данных (map).

Оценим эффективность: решение должно работать за линейно-логарифмическое время относительно количества слов (допустимо n * m log m, где m — средняя длина слова для сортировки букв).
*/

func sortString(s string) string {
	runes := []rune(s)
	sort.Slice(runes, func(i, j int) bool {
		return runes[i] < runes[j]
	})
	return string(runes)
}

func findAnagrams(sl []string) map[string][]string {
	res := make(map[string][]string)
	checkSorted := make(map[string][]string)

	for _, word := range sl {
		word := strings.ToLower(word)
		sorted := sortString(word)

		checkSorted[sorted] = append(checkSorted[sorted], word)

	}
	for _, values := range checkSorted {
		if len(values) < 2 {
			continue
		} else {
			sort.Strings(values)
			res[values[0]] = values

		}
	}
	return res
}

func main() {
	row := []string{"пятак", "пятка", "тяпка", "листок", "слиток", "столик", "стол"}
	fmt.Println(findAnagrams(row))

}
